#!/bin/bash

BACKUPHOSTS="<enter hosts here>"
TAPEDEVICE=/dev/nst0

afterFinishedHook() {
  #Called before tape is ejected
}


function errexit() {
  local err=$?
  set +o xtrace
  local code="${1:-1}"
  echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $err"
  # Print out the stack trace described by $function_stack
  if [ ${#FUNCNAME[@]} -gt 2 ]
  then
    echo "Call tree:"
    for ((i=1;i<${#FUNCNAME[@]}-1;i++))
    do
      echo " $i: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)"
    done
  fi
  echo "Exiting with status ${code}"
  exit "${code}"
}

trap 'errexit' ERR

waitForTape() {
  #Check if tape is in use
  while fuser -s $TAPEDEVICE; do
    echo "Tape in use waiting..."
    sleep 30
  done
  #Check if tape is inserted
  while mt-st -f $TAPEDEVICE status | grep -q DR_OPEN; do
    echo "Waiting inserted tape..."
    sleep 30
  done
}

doTapeBackup() {
  echo "Doing tape backup $1 $2"
  waitForTape
  cd /
  tar -cf - ${2:1} -V=$1 | buffer -o $TAPEDEVICE
}

checkTapeFinished() {
  BACKUPS=`mt-gnu -f $TAPEDEVICE status |grep "file number" | awk -F '=' '{print $2}'`
  if [ "$HOSTCOUNT" -eq "$BACKUPS" ]
  then
    echo "Tape done"
    afterFinisehdHook
    echo "Ejecting tape"
    #mt -f $TAPEDEVICE eject
  fi
}

HOSTCOUNT=0
for host in $BACKUPHOSTS
do
  if echo "$1" | grep -q "$host"; then
    doTapeBackup $host $1
  fi
  HOSTCOUNT=$((HOSTCOUNT+1))

done

checkTapeFinished

echo "Tape backup done"
